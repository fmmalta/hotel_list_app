// Mocks generated by Mockito 5.4.6 from annotations
// in hotel_list_app/test/features/venues/data/repositories/venue_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hotel_list_app/core/network/network_info.dart' as _i5;
import 'package:hotel_list_app/features/venues/data/datasources/venue_remote_data_source.dart'
    as _i3;
import 'package:hotel_list_app/features/venues/data/models/venue_dto.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVenueDTO_0 extends _i1.SmartFake implements _i2.VenueDTO {
  _FakeVenueDTO_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VenueRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockVenueRemoteDataSource extends _i1.Mock
    implements _i3.VenueRemoteDataSource {
  MockVenueRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.VenueDTO>> getVenues({
    int? page = 1,
    int? limit = 10,
    String? category = '',
    String? search = '',
    List<String>? facilities = const [],
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getVenues, [], {
              #page: page,
              #limit: limit,
              #category: category,
              #search: search,
              #facilities: facilities,
            }),
            returnValue: _i4.Future<List<_i2.VenueDTO>>.value(<_i2.VenueDTO>[]),
          )
          as _i4.Future<List<_i2.VenueDTO>>);

  @override
  _i4.Future<_i2.VenueDTO> getVenueById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getVenueById, [id]),
            returnValue: _i4.Future<_i2.VenueDTO>.value(
              _FakeVenueDTO_0(this, Invocation.method(#getVenueById, [id])),
            ),
          )
          as _i4.Future<_i2.VenueDTO>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
